#!/usr/bin/env node

/**
 * 载入 app 对象，启动一个 HTTP 服务，监听一个指定的端口
 */

/**
 * Module dependencies.
 */

const http = require('http')
const debug = require('debug')('newshop:server')
const app = require('../app')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (input) {
  const port = parseInt(input, 10)

  // named pipe
  if (isNaN(port)) return input

  // port number
  if (port >= 0) return port

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') throw error

  const port = app.get('port')
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}

/**
 * Get port from environment and store in Express.
 */

app.set('port', normalizePort(process.env.PORT || '3000'))

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError)
server.on('listening', onListening)
server.listen(app.get('port'))
